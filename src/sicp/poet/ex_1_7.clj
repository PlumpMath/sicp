(ns sicp.poet.ex-1-7)

(def 문제1-7-1
  "앞서 만든 good-enough?로는 아주 작은 수의 제곱근을 구하지 못한다.
  또 컴퓨터에서 수를 셈할 때에는 유효숫자가 딱 정해져 있다는 점 때문에 아주 큰 수의
  제곱근을 구하는 데도 알맞지 않다. 아주 작은 수나 큰 수의 제곱근을 구할 때
  good-enough?가 올바로 답을 내지 못하는 보기를 들어 이런 문제를 설명해보라"
  )

;; 기존 문제 1-6 프로시저
(defn abs [a]
      (if (< a 0) (- a) a))

(defn squares [a]
      (* a a))

(defn average [a b]
      (* (/ (+ a b) 2) 1.0))

(defn good-enough [guess x]
      (< (abs (- (squares guess) x)) 0.001))

(defn improve [guess x]
      (average guess (/ x guess)))

(defn sqrt-iter [guess x]
      (if (good-enough guess x)
        guess
        (sqrt-iter (improve guess x) x)))

;; 작은 수의 경우
(sqrt-iter 1 0.393948586)
;; 0.62766266

(sqrt-iter 1 0.3939485863434)
;; 0.62766266

(sqrt-iter 1 0.39394858634343534343)
;; 0.62766266

;; 큰 수의 경우
(sqrt-iter 1 93110)
;; 305.1393

(sqrt-iter 1 93101)
;; StackOverflowError   clojure.lang.Numbers$DoubleOps.divide (Numbers.java:615)

(def 답1-7-1
  "어림값을 0.001로 했을 때,
   작은 수의 경우 0.393948586나 0.39394858634343534343 모두 동일하게 0.62766266가 나왔고,
   큰 수의 경우 93110은 305.1393가 나왔지만 93101의 경우 StackOverflowError로 값이 제대로 나오지 않았다."
  )

(def 문제1-7-2
  "good-enough?를 만드는 여러 방법 가운데 하나는, 참값에 더 가까운 값 guess를 구하기 위해
  어림잡은 값을 조금씩 고쳐 나가면서 헌 값에 견주어 고친 값이 그다지 나아지지 않을 때까지 계산을
  이어나가는 것이다. 이 방법에 따라 위에서 만든 제곱근 프로시저를 고쳐 보자. 그렇게 고치고 나니
  아주 작은 수나 큰 수의 제곱근을 구할 때 전보다 잘 돌아가는가"
  )

;; 작은 수의 경우
;; 어림값 0.0009
(sqrt-iter 1 0.39394858634343534343)
;; 0.62766266

;; 어림값 0.0003
(sqrt-iter 1 0.39394858634343534343)
;; 0.62766266

;; 어림값 0.00001
(sqrt-iter 1 0.39394858634343534343)
;; 0.62765324

;; 어림값 0.00000001
(sqrt-iter 1 0.39394858634343534343)
;; 0.62765324

;; 어림값 0.000000005
(sqrt-iter 1 0.39394858634343534343)
;; 0.62765324

;; 큰 수의 경우
;; 어림값 5
(sqrt-iter 1 5009383129471)
;; 2238165.125604656

;; 어림값 3
(sqrt-iter 1 5009383129471)
;; 2238165.125604656

;; 어림값 2
(sqrt-iter 1 5009383129471)
;; 2238165.125604656

;; 어림값 1
(sqrt-iter 1 5009383129471)
;; 2238165.12560423

;; 어림값 0.5
(sqrt-iter 1 5009383129471)
;; 2238165.12560423

;; 어림값 0.1
(sqrt-iter 1 5009383129471)
;; 2238165.12560423

;; 어림값 0.05
(sqrt-iter 1 5009383129471)
;; 2238165.12560423

;; 어림값 0.01
(sqrt-iter 1 5009383129471)
;; 2238165.12560423

(def 답1-7-2
  "위의 방법으로 작은 수는 0.39394858634343534343, 큰 수는 5009383129473를 가지고 어림값을 변경하면서 제곱근을 계산하였다.
   작은 수의 경우는 어림값 0.00001일 때, 참값에 가까운 0.62765324가 나왔고, 그 이하는 변함이 없었다.
   큰 수의 경우 어림값 1일 때, 참값에 가까운 2238165.12560423가 나왔고, 그 이하는 변함이 없었다.
   이상으로 볼 때, 수의 크기에 따라 아주 작은 수는 어림값을 낮추고 아주 큰 수는 어림값을 높일수록 참 값에 가까운 guess값을
   얻을 수 있음을 알았다.
   참값 참고 : http://bit.ly/2a99VkK"
  )